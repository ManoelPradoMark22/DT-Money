/* 
Pq o component renderiza?

- Hooks changed (estado, contexto, reducer...)
- Props changed (propriedades)
- Parent rerendered (component pai renderizou)

Qual o fluxo de renrização? (mto rápido, mas caso o componente for muito extenso, como uma lista grande, ai pode ter uma lentidão)
  1. O react recria o HTML da interface do componente (recria na memória)
  2. Compara a versão do HTML recriada com a versão anterior
  3. Se mudou algo, o React reescreve o HTML na tela
*/

Memo:
Quando o React entra no fluxo de renderização e estamos usando o Memo, temos o passo 0(zero) q antecede a dos passos anteriores:
  0. Hooks changed? or Props changed?  -> Deep comparison
    0.1: Comparar a versão anterior dos hooks e props
    0.2: Se mudou algo, ele vai permitir a nova renderização (e entao segue para o fluxo anterior q vimos acima 1..) - Mas se nao mudou, ele nem vai para lá e encerra aqui

Obs.: Mas, use o memo em estruturas complexas!! para componentes simples, às vezes o memo vai ser mais lento (por fazer o deep comparison) do que se ele seguisse com o fluxo original de recirar o html!!!


 - Exemplo memo para um component / funcao (nesse nosso exemplo abaixo nao precisaria, por ser bem simples):
    https://github.com/ManoelPradoMark22/DT-Money/commit/1780ac0ce33f33a048f48da700ba7622edf1b681

    function SearchFormComponent() {
      const fetchTransactions = useContextSelector(
        TransactionsContext,
        (context) => {
          return context.fetchTransactions
        },
      )
    ......

    export const SearchForm = memo(SearchFormComponent)
  
 - Exemplo memo para uma variável

 export function useSummary() {
  const transactions = useContextSelector(TransactionsContext, (context) => {
    return context.transactions
  })

  const summary = useMemo(() => {
    return transactions.reduce(
      (acc, transaction) => {
        if (transaction.type === 'income') {
          acc.income += transaction.price
          acc.total += transaction.price
        } else {
          acc.outcome += transaction.price
          acc.total -= transaction.price
        }

        return acc
      },
      {
        income: 0,
        outcome: 0,
        total: 0,
      },
    )
  }, [transactions])

  return summary
}
 -> variável summary so vai ser recriada quando o transactions mudar (antes a variavel summary era recriada toda vez que o useSummary() fosse renderizado novamente - por exemplo, sempre q os componentes pais do useSummary() renderizavam, nossa variavel summary tb mudava - agr evitamos esse incômodo)

________________________



  //fora:
  transition: background-color 0.2s; //animacao acontece no hover e quando retira o mouse tb
  
  &:hover {
    background: ${props => props.theme['green-700']};
    transition: background-color 0.2s; //animacao acontece somente no hover
  }

  ______________

por padrao a tag strong vem com o display inline - nesse, nao tem como aplicar margin vertical
, por isso mudamos para o block nesse caso
  strong {
    display: block;
    margin-top: 1rem;
    font-size: 2rem;
  }

  ______________

  usa o collapse separate para poder espacar as linhas e colunas
  border-collapse: separate;
  border-spacing: 0 0.5rem;  // horizontal (colunas) , vertical (linhas)

  ______________
  libs de acessibilidade:
   - ariakit, 
   - headlessui
   - radix-ui  -> os components seguem as normas de acessibilidade
   - chakraui (mas esse ja vem estilizado)

  as Child -> vai fazer com que o Dialog.Trigger nao crie um novo botao, mas que aproveite o botao dentro da tag (q nós criamos)
  <Dialog.Trigger asChild>
    <NewTransactionBtn>Nova transação</NewTransactionBtn>
  </Dialog.Trigger>

  ______________

  Dialog.Portal (do React)  
  fornece uma forma ELEGANTE de renderizar um elemento filho dentro de um OUTRO local da DOM


  ______________

  inset: 0; -> é o mesmo que:

      bottom: 0;
      top:0;
      left:0;
      roght:0;

  ______________

fixando nosso modalno centro
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

  ______________

  o Focus do botao é relativo ao FONTSIZE do botao!!
  entao, para que, por exemplo, o icone dentro do botao nao fique desalinhado levemnte na horizontal, 
  aplicamos o seguinte estilo no BOTAO (assim o icone centraliza):
  line-height: 0;  // ou // font-size: 0;

  ______________

  no css, podemos pegar um atributo do HTML, como exemplo, o atributo data-state do check box do radix
  assim, podemos fazer estilizações dinamicas, de acordo com o checkbox selecionado ou nao
  &[data-state='checked'] {
    
  }

  ______________
  rodar o json server

   npx json-server server.json

   npx json-server server.json -d 500   //adiciona um delay de 500ms nas requisicoes

   npx json-server server.json -w   //modo watch -> ele monitora as mudancas no arquivo e atualiza automaticamente o servidor

  npx json-server server.json -p 3333    // rodar em uma porta

   //para a versao @0.17.4vou usar assim: npx json-server server.json -w -d 500 

  https://github.com/typicode/json-server

  http://localhost:3000/transactions/?_sort=createdAt   //padrao crescente (asc)
  http://localhost:3000/transactions/?_sort=createdAt&_order=desc
multiples fileds, separate them with comma 

________________________

Por padrão o JSON Server agora está disponibilizando a versão alpha, que ainda está instável e faltam várias funcionalidades. Sugerimos instalar a versão estável com o comando:

npm i -D json-server@0.17.4


______________

fetch

  useEffect(() => {
    fetch('http://localhost:3000/transactions')
      .then(res => res.text())
      .then(data => console.log(data))
  }, [])

  //or

  useEffect(() => {
    fetch('http://localhost:3000/transactions')
      .then(res => res.json())
      .then(data => console.log(data))
  }, [])


  ______________

  como chamar uma funcao async no useEffect (crie ela fora!)

  async function loadTransactions() {
    const response = await fetch('http://localhost:3000/transactions');
    const data = await response.json();

    console.log(data);
  }
  
  useEffect(() => {
    loadTransactions();
  }, [])

  isso pq, a funcao callback do useEffect nao pode ser asyn!!

  Assim daria erro:
  useEffect(async () => {
    //code
  }, [])

  ______________

  <p>olá                          dasdasd</p> // assim renderiza apenas 1 espaço
  <p>olá &nbsp;&nbsp;&nbsp;&nbsp; dasdasd</p> // assim renderiza os espacos